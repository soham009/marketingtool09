# Generated by Django 2.2.5 on 2019-10-23 11:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Drop_Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Drop_Name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Login_Time',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Time', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Logout_Time',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Time', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Pickup_Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Location_Name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Leads',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Created_at', models.DateTimeField(auto_now_add=True)),
                ('Updated_at', models.DateTimeField(auto_now=True)),
                ('Hub', models.CharField(blank=True, max_length=264)),
                ('Name', models.CharField(max_length=264)),
                ('Gender', models.CharField(blank=True, max_length=264)),
                ('EmailId', models.CharField(blank=True, max_length=264)),
                ('ContactNo', models.CharField(blank=True, max_length=264)),
                ('CompanyName', models.CharField(blank=True, max_length=264)),
                ('TravalToWork', models.CharField(blank=True, max_length=264)),
                ('TravelToWorkOther', models.CharField(blank=True, max_length=264)),
                ('MonthlySpend', models.CharField(blank=True, max_length=264)),
                ('HearAboutUs', models.CharField(blank=True, max_length=264)),
                ('SubmittedOn', models.CharField(blank=True, max_length=264)),
                ('Lead_Status', models.CharField(choices=[('Interested', 'Interested'), ('Undecided', 'Undecided'), ('Uncontacted', 'Uncontacted'), ('Converted', 'Converted')], default='Uncontacted', max_length=264)),
                ('Remark', models.TextField(blank=True)),
                ('LocationFromOther', models.CharField(blank=True, max_length=264)),
                ('SubmittedOnDate', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_valid', models.BooleanField(default=False)),
                ('Drop_Location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketing_tool_lead_manager_app.Drop_Location')),
                ('Login_Time_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketing_tool_lead_manager_app.Login_Time')),
                ('Logout_Time_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketing_tool_lead_manager_app.Logout_Time')),
                ('Pickup_Location_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='marketing_tool_lead_manager_app.Pickup_Location')),
            ],
            options={
                'verbose_name': 'Lead',
                'verbose_name_plural': 'Leads Collected',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'normal_user'), (2, 'admin'), (13, 'super_admin')], default=1)),
                ('name', models.CharField(blank='True', max_length=264)),
                ('password_change_request', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
